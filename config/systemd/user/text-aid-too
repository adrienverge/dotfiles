#!/usr/bin/env node
// Transpiled from server.coffee version 1.1.7 by Adrien on 2023-11-15

const VERSION = "2.0.0";

import {exec} from 'child_process';
import * as fs from 'fs';
import {tmpdir} from 'os';
import {join} from 'path';
import {parseArgs} from 'util';

import {WebSocketServer} from 'ws';

const secret = process.env.TEXT_AID_TOO_SECRET;

const config = {
  port: "9293",
  host: "localhost",
  editor: "gvim -f"
};

const args = parseArgs({options: {
  'help': {type: 'boolean'},
  'port': {type: 'string'},
  'editor': {type: 'string'},
}});

if (args.values.help) {
  console.log(
    "Usage:\n" +
    "text-aid-too [--port PORT] [--editor EDITOR-COMMAND]\n" +
    "\n" +
    "Example:\n" +
    "export TEXT_AID_TOO_EDITOR=\"gvim -f\"\n" +
    "TEXT_AID_TOO_SECRET=hul8quahJ4eeL1Ib text-aid-too --port 9293\n" +
    "\n" +
    "Environment variables:\n" +
    "TEXT_AID_TOO_EDITOR: the editor command to use.\n" +
    "TEXT_AID_TOO_SECRET: the shared secret; set this in the extension too.\n" +
    "\n" +
    "Version: " + VERSION + "\n");
  process.exit(0);
}

args.port = args.port || config.port;
args.editor = args.editor || process.env.TEXT_AID_TOO_EDITOR || config.editor;

console.log(
  "server  ws://" + config.host + ":" + args.port + "\n" +
  //"secret  " + (secret != null ? secret : '<NONE>') + "\n" +
  "editor  " + args.editor + "\n" +
  "version " + VERSION);

const wss = new WebSocketServer({
  port: args.port,
  host: config.host
});

wss.on("connection", ws => ws.on("message", handler(ws)));

function getEditCommand(filename) {
  const command = 0 <= args.editor.indexOf("%s") ? args.editor.replace("%s", filename) : args.editor + " " + filename;
  console.log("exec:", command);
  return command;
}

function handler(ws) {
  return function(message) {
    const request = JSON.parse(message);
    let onExit = [];
    onExit.push(() => ws.close());
    function exit(continuation) {
      if (continuation == null) {
        continuation = null;
      }
      const ref1 = onExit.reverse();
      for (let j = 0; j < ref1.length; j++) {
        const callback = ref1[j];
        callback();
      }
      onExit = [];
      return typeof continuation === "function" ? continuation() : undefined;
    }
    if ((secret != null) && 0 < secret.length) {
      if (!((request.secret != null) && request.secret === secret)) {
        console.log("mismatched or invalid secret; aborting request:\n  required secret: " + secret + "\n  received secret: " + request.secret);
        return exit();
      }
    }
    function sendResponse(response, continuation) {
      if (continuation == null) {
        continuation = null;
      }
      response.serverVersion = VERSION;
      ws.send(JSON.stringify(response));
      return typeof continuation === "function" ? continuation() : undefined;
    }
    const handlers = {
      ping: function() {
        console.log("ping: ok");
        request.isOk = true;
        return sendResponse(request, exit);
      },
      edit: function() {
        const username = process.env.USER || "unknown";
        const directory = process.env.TMPDIR || tmpdir();
        const timestamp = process.hrtime().join("-");
        const suffix = request.isContentEditable ? "html" : "txt";
        const filename = join(directory, username + "-text-aid-too-" + timestamp + "." + suffix);
        console.log("edit:", filename);
        onExit.push(() => console.log("  done:", filename));
        return fs.writeFile(filename, request.originalText != null ? request.originalText : request.text, error => {
          if (error) {
            return exit();
          }
          onExit.push(() => fs.unlink(filename, () => {}));
          function sendText(continuation) {
            if (continuation == null) {
              continuation = null;
            }
            return fs.readFile(filename, "utf8", function(error, data) {
              if (error) {
                return exit();
              }
              console.log("  send: " + filename + " [" + data.length + "]");
              data = data.replace(/\n$/, "");
              request.text = request.originalText = data;
              return sendResponse(request, continuation);
            });
          }

          let debounce;
          fs.watch(filename, () => {
            if (debounce)
              clearTimeout(debounce);
            debounce = setTimeout(() => {
              debounce = undefined;
              sendText();
            }, 300);
          });

          const child = exec(getEditCommand(filename));
          return child.on("exit", error => {
            if (error) {
              return exit();
            } else {
              return sendText(exit);
            }
          });
        });
      }
    };
    if (handlers[request.name] != null) {
      return handlers[request.name]();
    } else {
      return console.log("error; unknown request:", request);
    }
  };
}
