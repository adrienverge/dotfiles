#!/bin/bash
# Copyright 2017 Adrien Vergé
# Created on 2017-12-20
# Updated on 2018-05-16
# Updated on 2022-08-31
# Updated on 2023-12-08

set -eu

usage() {
  echo "usage: fake-scanned-pdf [--no-rotation] [--no-noise]" >&2
  echo "                        [--no-halftoning] [--levels <20%,80%>]" >&2
  echo "                        [--dpi <200>]" >&2
  echo "                        <inputs>... <output>" >&2
  echo "examples:" >&2
  echo "  fake-scanned-pdf --no-rotation --no-noise INPUT.PDF OUTPUT.PDF" >&2
  echo "  fake-scanned-pdf INPUT1.JPG INPUT2.PNG ... OUTPUT.PDF" >&2
  echo "Transforms an input (images or PDF) into a PDF that looks scanned." >&2
}

ROTATION=1
NOISE=1
HALFTONING=1
DPI=200
LEVELS="20%,80%"
INPUTS=()
OUTPUT=

while [[ $# -gt 0 ]]; do
  case $1 in
    --no-rotation)
      ROTATION=0
      shift
      ;;
    --no-noise)
      NOISE=0
      shift
      ;;
    --no-halftoning)
      HALFTONING=0
      shift
      ;;
    --dpi)
      DPI="$2"
      [[ "$DPI" =~ ^[0-9]+$ ]] || { usage; exit 1; }
      shift
      shift
      ;;
    --levels)
      LEVELS="$2"
      shift
      shift
      ;;
    -h|--help|-*|--*)
      usage
      exit 1
      ;;
    *)
      if [ -n "$OUTPUT" ]; then
        INPUTS+=("$OUTPUT")
      fi
      OUTPUT="$1"
      shift
      ;;
  esac
done

[ "${#INPUTS[@]}" -gt 0 ] || { usage; exit 1; }
for file in "${INPUTS[@]}"; do
  [ -f "$file" ] || { echo "error: \"$file\" not found" >&2; exit 1; }
done
[[ ("$OUTPUT" == *.pdf) || ("$OUTPUT" == *.PDF) ]] || {
  echo "error: \"$OUTPUT\" is not a PDF file" >&2; exit 1; }

TMP="$(mktemp -d fake-scanned-pdf-XXXX)"
function cleanup {
  rm -r "$TMP"
}
trap cleanup EXIT

W=$((DPI*827/100))  # A4, ex. for 200 DPI: 1654 pixels
H=$((DPI*1169/100)) # A4, ex. for 200 DPI: 2338 pixels

# List all pages of all inputs (whatever they are PDFs or simple images)
pages=()
while read line; do
  pages+=("$line")
done < <(identify -format '%i[%p]\n' "${INPUTS[@]}")
echo "Listed ${#pages[@]} pages to generate"

for i in "${!pages[@]}"; do
  echo -n "Page $((i + 1))"
  rotation=
  if [ $ROTATION -eq 1 ]; then
    rotation=$(echo "scale=2; $RANDOM/32768-0.5" | bc)
    echo -n ", applying rotation=$rotation°"
    rotation="-rotate $rotation -crop ${W}x${H}+0+0 +repage"
  fi
  echo -n ", resizing"
  noise=
  if [ $NOISE -eq 1 ]; then
    echo -n ", adding noise"
    magick -size ${W}x${H} xc: +noise Random \
           -virtual-pixel tile -blur 0x2 -auto-level \
           -level 3%,15% \
           -sharpen 0x1.2 \
           -channel G -separate \
           "$TMP/noise.jpg"
     noise="$TMP/noise.jpg -compose bumpmap -composite"
  fi
  if [ $HALFTONING -eq 1 ]; then
    echo -n ", halftoning"
    halftoning="-ordered-dither h4x4a"
  else
    halftoning="-monochrome"
  fi
  echo "…"

  magick -density $DPI "${pages[$i]}" \
         $rotation \
         -resize ${W}x${H} \
         -gravity center -extent ${W}x${H} \
         -alpha remove -background white -colorspace gray \
         -level $LEVELS \
         $noise \
         $halftoning \
         "$TMP/page-$(printf "%02d" $i).jpg"
done

pages=$(ls $TMP/page-*.jpg)

echo "Creating Group 4 compressed PDF (A4, $DPI dpi)…"
magick $pages \
       -level 50% -monochrome -compress Group4 \
       -density ${DPI}x${DPI} -units PixelsPerInch \
       "$TMP/scan.pdf"

exiftool -q -all:all= "$TMP/scan.pdf"  # remove references to ImageMagick
exiftool -q "-Title=SCAN" "$TMP/scan.pdf"
exiftool -q "-CreateDate=$(date +'%F %T %z')" "$TMP/scan.pdf"
qpdf --linearize "$TMP/scan.pdf" "$OUTPUT"  # really delete old tags
